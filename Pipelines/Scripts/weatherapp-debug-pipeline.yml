trigger:
- none

pool:
  name: Default
  vmImage: chaitanya

parameters:
  - name: environment
    displayName: Environment Select
    type: string
    default: Dev
    values:
      - Dev
      - Qa
      - Uat
      - Prod
variables:
  -group: Credentials
stages:
  - stage: build
    displayName: Build
    jobs:
      - job: "BuildArtifact"
        displayName: "Build Artifact"
        steps:
          - task: ArchiveFiles@2
            displayName: Archive Source/WeatherApp
            inputs:
              rootFolderOrFile: 'Source/WeatherApp'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/Apps/WeatherApp.zip'
              replaceExistingArchive: true
          - task: CopyFiles@2
            displayName: Copy ARM Templates to drop
            inputs:
              SourceFolder: 'Pipelines/Infra/ARMTemplates'
              Contents: '**'
              TargetFolder: '$(Build.ArtifactStagingDirectory)/ARMtemplates'
          - task: CopyFiles@2
            displayName: Copy Pwershell Scripts to drop
            inputs:
              SourceFolder: 'Pipelines/Scripts'
              Contents: '**'
              TargetFolder: '$(Build.ArtifactStagingDirectory)/PowershellScripts'
          - task: PublishBuildArtifacts@1
            displayName: "Publish Artifact: drop"
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'drop'
              publishLocation: 'Container'
  - stage: "InfraDeployment"
    displayName: "Deploy : Infra-${{ parameters.environment }}"
    dependsOn: build
    jobs:
      - deployment: "DeployInfra"
        displayName: "Deploy Infra"
        environment: ${{ parameters.environment }}
        strategy:
          runOnce:
            deploy:
             steps:
               - task: DownloadBuildArtifacts@1
                 inputs:
                   buildType: 'current'
                   downloadType: 'single'
                   artifactName: 'drop'
                   downloadPath: '$(System.ArtifactsDirectory)'
               - task: AzureResourceManagerTemplateDeployment@3
                 inputs:
                   deploymentScope: 'Resource Group'
                   azureResourceManagerConnection: 'NewFreeTrial2024'
                   subscriptionId: '2dc383a6-eed6-4aa2-a955-b4fffa7da912'
                   action: 'Create Or Update Resource Group'
                   resourceGroupName: 'RG-KVC'
                   location: 'East US 2'
                   templateLocation: 'Linked artifact'
                   csmFile: '$(System.ArtifactsDirectory)/drop/ARMtemplates/vm/vm.json'
                   csmParametersFile: '$(System.ArtifactsDirectory)/drop/ARMtemplates/vm/parameters_dev.json'
                   overrideParameters: '-vmPublicIPName "dk-sonarqube-publicIpName" -vmName "dk-sonarqube-ubuntu-vm" -vmNetworkSecurityGroupsName "dk-sonarqube-vmNetworkSecurityGroup" -vmVNetName "dk-sonarqube-vmVNet" -vmSubnetName "dk-sonarqube-vmVNetSubnet" -vmNetworkInterface "dk-sonarqube-vmNetworkInterface" -vmUserName "dk-sonarqube-ubuntu-vm" -vmPassword ${{variables.SonarqubeVmPassword}} -vmSize "Standard_B2s_v2" -env "nonprod" -location "centralus"'
                   deploymentMode: 'Incremental'
  - stage: "AppDeploy"
    displayName: "Deploy : App-${{ parameters.environment }}"
    dependsOn: InfraDeployment
    jobs:
      - deployment: "DeployApp"
        displayName: "Deploy App"
        environment: ${{ parameters.environment }}
        strategy:
          runOnce:
            deploy:
             steps:
               - task: DownloadBuildArtifacts@1
                 inputs:
                   buildType: 'current'
                   downloadType: 'single'
                   artifactName: 'drop'
                   downloadPath: '$(System.ArtifactsDirectory)'
               - task: PowerShell@2
                 inputs:
                   targetType: 'inline'
                   script: |
                     Get-ChildItem $(System.ArtifactsDirectory)/drop