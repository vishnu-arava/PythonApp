trigger:
- none

pool:
  name: Default
  vmImage: chaitanya

parameters:
  - name: environment
    displayName: Environment Select
    type: string
    default: dev
    values:
      - dev
      - qa
      - perf
  - name: resourcegroup
    displayName: Resource group
    type: string
    default: RG-DEV
    values:
      - RG-DEV
      - RG-QA
      - RG-PERF
      - RG-SATYAM
      - RG-VA
variables:
  - group: WeatherApp-${{ parameters.environment }}

stages:
  - stage: build
    displayName: Build
    jobs:
      - job: "BuildArtifact"
        displayName: "Build Artifact"
        steps:
          - task: ArchiveFiles@2
            displayName: Archive Source/WeatherApp
            inputs:
              rootFolderOrFile: 'Source/WeatherApp'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/Apps/WeatherApp.zip'
              replaceExistingArchive: true
          - task: CopyFiles@2
            displayName: Copy ARM Templates to drop
            inputs:
              SourceFolder: 'Pipelines/Infra/ARMTemplates'
              Contents: '**'
              TargetFolder: '$(Build.ArtifactStagingDirectory)/ARMtemplates'
          - task: CopyFiles@2
            displayName: Copy Pwershell Scripts to drop
            inputs:
              SourceFolder: 'Pipelines/Scripts'
              Contents: '**'
              TargetFolder: '$(Build.ArtifactStagingDirectory)/PowershellScripts'
          - task: PublishBuildArtifacts@1
            displayName: "Publish Artifact: drop"
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'drop'
              publishLocation: 'Container'
  - stage: "InfraDeployment"
    displayName: "Deploy : Infra-${{ parameters.environment }}"
    dependsOn: build
    jobs:
      - deployment: "DeployInfra"
        displayName: "Deploy Infra"
        environment: ${{ parameters.environment }}
        strategy:
          runOnce:
            deploy:
             steps:
               - task: DownloadBuildArtifacts@1
                 inputs:
                   buildType: 'current'
                   downloadType: 'single'
                   artifactName: 'drop'
                   downloadPath: '$(System.ArtifactsDirectory)'
               - task: AzureResourceManagerTemplateDeployment@3
                 displayName: Sonarqube vm
                 condition: eq('${{ parameters.environment }}','qa')
                 inputs:
                   deploymentScope: 'Resource Group'
                   azureResourceManagerConnection: $(serviceConnection)
                   subscriptionId: $(subscriptionId)
                   action: 'Create Or Update Resource Group'
                   resourceGroupName: ${{ parameters.resourcegroup }}
                   location: 'East US 2'
                   templateLocation: 'Linked artifact'
                   csmFile: '$(System.ArtifactsDirectory)/drop/ARMtemplates/vm/vm.json'
                   csmParametersFile: '$(System.ArtifactsDirectory)/drop/ARMtemplates/vm/parameters_${{ parameters.environment }}.json'
                   overrideParameters: '-vmPublicIPName "dk-sonarqube-publicIpName" -vmName "dk-sonarqube-ubuntu-vm" -vmNetworkSecurityGroupsName "dk-sonarqube-vmNetworkSecurityGroup" -vmVNetName "dk-sonarqube-vmVNet" -vmSubnetName "dk-sonarqube-vmVNetSubnet" -vmNetworkInterface "dk-sonarqube-vmNetworkInterface" -vmUserName "dk-sonarqube-ubuntu-vm" -vmPassword $(SonarqubeVmPassword) -vmSize "Standard_B2s_v2" -env "nonprod" -location "centralus"'
                   deploymentMode: 'Incremental'
                   deploymentOutputs: 'deploymentOutputs'
               - task: PowerShell@2
                 displayName: Get Sonarqube Details
                 condition: eq('${{ parameters.environment }}','qa')
                 inputs:
                   targetType: 'inline'
                   script: |
                     $vmname= '$(deploymentOutputs.vmName.value)'
                     $vmusername= '$(deploymentOutputs.vmUserName.value)'
                     Write-Host "##vso[task.setvariable variable=vmname;]$vmname"
                     Write-Host "##vso[task.setvariable variable=vmusername;]$vmusername"
                     Write-Host "Hostname: $vmname"
                     Write-Host "Username: $vmusername"
               - task: AzureResourceManagerTemplateDeployment@3
                 displayName: SQL 
                 inputs:
                   deploymentScope: 'Resource Group'
                   azureResourceManagerConnection: $(serviceConnection)
                   subscriptionId: $(subscriptionId)
                   action: 'Create Or Update Resource Group'
                   resourceGroupName: ${{ parameters.resourcegroup }}
                   location: 'Central US'
                   templateLocation: 'Linked artifact'
                   csmFile: '$(System.ArtifactsDirectory)/drop/ARMtemplates/azureSql/azureSqlDb/azureSqlDb.json'
                   csmParametersFile: '$(System.ArtifactsDirectory)/drop/ARMtemplates/azureSql/azureSqlDb/parameters_${{ parameters.environment }}.json'
                   overrideParameters: '-serverName $(sql-serverName) -dbName $(sql-dbName) -userName $(sql-dbUserName) -password $(SqlDevPassword) -tlsVersion "1.2" -env "dev" -location "centralus"'
                   deploymentMode: 'Incremental'
                   deploymentOutputs: 'deploymentOutputs'
               - task: PowerShell@2
                 displayName: Get Sql Details
                 inputs:
                   targetType: 'inline'
                   script: |
                     $envsqldblink= '$(deploymentOutputs.sqldblink.value)'
                     $envsqldbname= '$(deploymentOutputs.sqldbname.value)'
                     $envsqldbusername= '$(deploymentOutputs.sqldbusername.value)'
                     Write-Host "##vso[task.setvariable variable=envsqldblink;]$envsqldblink"
                     Write-Host "##vso[task.setvariable variable=envsqldbname;]$envsqldbname"
                     Write-Host "##vso[task.setvariable variable=envsqldbusername;]$envsqldbusername"
                     Write-Host "Sql db link : $envsqldblink"
                     Write-Host "Sql db name : $envsqldbname"
                     Write-Host "Sql db username : $envsqldbusername"
               - task: AzureCLI@2
                 displayName: TenantId,Objectid and subscription Id 
                 inputs:
                   azureSubscription: $(serviceConnection)
                   scriptType: 'ps'
                   scriptLocation: 'inlineScript'
                   inlineScript: |
                     Write-Output "The tenant ID is: ${env:tenantId}"
                     Write-Host "##vso[task.setvariable variable=tenantId;]${env:tenantId}"
                     $objectidadmin=az ad user list --query "[?contains(displayName, 'Kolli Chaitanya')].id" --output tsv
                     Write-Host "##vso[task.setvariable variable=objectidadmin;]$objectidadmin"
                     $subscriptionId = az account show --query id -o tsv
                     Write-Host "##vso[task.setvariable variable=subscriptionId;]$subscriptionId"
                   addSpnToEnvironment: true
               - task: AzureResourceManagerTemplateDeployment@3
                 displayName: Key Vaults
                 inputs:
                   deploymentScope: 'Resource Group'
                   azureResourceManagerConnection: $(serviceConnection)
                   subscriptionId: $(subscriptionId)
                   action: 'Create Or Update Resource Group'
                   resourceGroupName: ${{ parameters.resourcegroup }}
                   location: 'Central US'
                   templateLocation: 'Linked artifact'
                   csmFile: '$(System.ArtifactsDirectory)/drop/ARMtemplates/keyVault/keyVault.json'
                   csmParametersFile: '$(System.ArtifactsDirectory)/drop/ARMtemplates/keyVault/parameters_${{ parameters.environment }}.json'
                   overrideParameters: '-keyvaultname "dk-weatherapp-core" -tenantId $(tenantId) -objectId $(objectidadmin) -spTenantId $(tenantId) -env ${{ parameters.environment }}'
                   deploymentMode: 'Incremental'
                   deploymentOutputs: 'deploymentOutputs'
               - task: PowerShell@2
                 displayName: Get Key Vaults Details
                 inputs:
                   targetType: 'inline'
                   script: |
                     $envkeyvaultname= '$(deploymentOutputs.keyVaultName.value)'
                     Write-Host "##vso[task.setvariable variable=envkeyvaultname;]$envkeyvaultname"
                     Write-Host "KeyVault name is: $envkeyvaultname"
               - task: AzureCLI@2
                 displayName: App Registration
                 inputs:
                   azureSubscription: $(serviceConnection)
                   scriptType: 'ps'
                   scriptLocation: 'scriptPath'
                   scriptPath: '$(System.ArtifactsDirectory)/drop/PowershellScripts/Azcli/appRegistration.ps1'
                   arguments: '-appRegistrationName "dk-weatherapp-kv-link" -appRegistrationClientSecretName "dk-weatherapp-kv-link-clientsecret" -keyVaultName $(envkeyvaultname) -resourceGroupName ${{ parameters.resourcegroup }} -tenantId $(tenantId) -subscriptionId $(subscriptionId)'
  - stage: "AppDeploy"
    displayName: "Deploy : App-${{ parameters.environment }}"
    dependsOn: InfraDeployment
    jobs:
      - deployment: "DeployApp"
        displayName: "Deploy App"
        environment: ${{ parameters.environment }}
        strategy:
          runOnce:
            deploy:
             steps:
               - task: DownloadBuildArtifacts@1
                 inputs:
                   buildType: 'current'
                   downloadType: 'single'
                   artifactName: 'drop'
                   downloadPath: '$(System.ArtifactsDirectory)'
               - task: PowerShell@2
                 inputs:
                   targetType: 'inline'
                   script: |
                     Get-ChildItem $(System.ArtifactsDirectory)/drop
               - task: PowerShell@2
                 displayName: Test Powershell for variables
                 inputs:
                   targetType: 'inline'
                   script: 'echo $(testvalue)'
              #  - task: PowerShell@2
              #    displayName: Updating Yaml Variable
              #    inputs:
              #      filePath: '$(System.ArtifactsDirectory)/drop/PowershellScripts/Powershell/updatingYamlPipelinevariables.ps1'
              #      arguments: '-organizationName "venkatachaitanya095" -projectName "PythonProjects" -pipelineName "weatherapp-debug-pipeline" -variableName "vmip" -variableValue "NewValue" -patToken "at5imguzafuqfpchwzz6wbjnp7tkbdcdkglxccreuqwr2ht7fnzq" -pipelineId "63"'
               
              #  - task: AzureCLI@2
              #    displayName: Az cli to update Yaml Variables
              #    inputs:
              #      azureSubscription: $(serviceConnection)
              #      scriptType: 'ps'
              #      scriptLocation: 'scriptPath'
              #      scriptPath: '$(System.ArtifactsDirectory)/drop/PowershellScripts/Azcli/updatingYamlPipelineariables.ps1'
              #      arguments: '-organizationName "venkatachaitanya095" -projectName "PythonProjects" -pipelineId "63" -variableName "vmip" -variableValue "192.168.1.1" -patToken "at5imguzafuqfpchwzz6wbjnp7tkbdcdkglxccreuqwr2ht7fnzq"'
               - task: PowerShell@2
                 inputs:
                   filePath: '$(System.ArtifactsDirectory)/drop/PowershellScripts/Powershell/updating_libVariables.ps1'
                   arguments: '-organizationName "venkatachaitanya095" -projectName "PythonProjects" -libVariableName "Credentials" -libVariableParameterName $(variabletoupdate) -patToken $(PAT) -valuetoUpdate "newValueinTestVariable"'
               
               - task: PowerShell@2
                 displayName: After Update
                 inputs:
                   targetType: 'inline'
                   script: 'echo $(testvalue)'