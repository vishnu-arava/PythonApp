trigger:
- none

pool:
  name: RohitPool
  vmImage: RohitAgent

parameters:
    - name: environment
      type: string
      default: dev
      values:
        - dev
        - qa
        - uat
        - prod

    - name: resourcegroup
      type: string
      default: DEV
      values:
        - VA
        - DEV
        - QA
        - UAT
        - PROD

    - name: RohitPool
      type: string
      default: RohitAgent
      values:
        - RohitAgent

variables:
  - group: MyVarGroup
  
stages:
  - stage: "Build"
    displayName: "Building WeatherApp"
    jobs:
      - job: "BuildWeathetherApp"
        displayName: "Build WeathetherApp"
        steps:
          - task: ArchiveFiles@2
            inputs:
              rootFolderOrFile: 'Source/WeatherApp'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/Apps/WeatherApp.zip'
          - task: ArchiveFiles@2
            inputs:
              rootFolderOrFile: 'Source/WorldClimateApi'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/Apps/WorldClimateApi.zip'
          - task: CopyFiles@2
            inputs:
              SourceFolder: 'Pipelines/Infra/ARMTemplates'
              Contents: '**'
              TargetFolder: '$(Build.ArtifactStagingDirectory)/ARMInfra'
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'drop'
              publishLocation: 'Container'


  - stage: "DevInfra"
    displayName: "Dev Infra"
    dependsOn: Build
    jobs:
      - deployment: "BuildDevInfra"
        displayName: "Build Dev Infra"
        environment: dev
        strategy:
          runOnce:
            deploy:
              steps:
                - task: DownloadBuildArtifacts@1
                  inputs:
                    buildType: 'current'
                    downloadType: 'single'
                    artifactName: 'drop'
                    downloadPath: '$(System.ArtifactsDirectory)/downloads'
                
                - task: AzureResourceManagerTemplateDeployment@3
                  inputs:
                    deploymentScope: 'Resource Group'
                    azureResourceManagerConnection: 'vishnuSubscriptionServiceConnection'
                    subscriptionId: '2dc383a6-eed6-4aa2-a955-b4fffa7da912'
                    action: 'Create Or Update Resource Group'
                    resourceGroupName: 'RG-VA'
                    location: 'South Central US'
                    templateLocation: 'Linked artifact'
                    csmFile: '$(System.ArtifactsDirectory)/downloads/drop/ARMInfra/Appservice/appservice.json'
                    csmParametersFile: '$(System.ArtifactsDirectory)/downloads/drop/ARMInfra/Appservice/parameters_dev.json'
                    deploymentMode: 'Incremental'
  - stage: "DevAppDeploy"
    displayName: "Dev App Deploy"
    dependsOn: DevInfra
    jobs:
      - deployment: "DevAppDeploy"
        displayName: "Dev App: WeatherApp"
        environment: dev
        strategy:
          runOnce:
            deploy:
              steps:
                - task: DownloadBuildArtifacts@1
                  inputs:
                    buildType: 'current'
                    downloadType: 'single'
                    artifactName: 'drop'
                    downloadPath: '$(System.ArtifactsDirectory)/downloads'
                
                - task: AzureRmWebAppDeployment@4
                  inputs:
                    ConnectionType: 'AzureRM'
                    azureSubscription: 'vishnuSubscriptionServiceConnection'
                    appType: 'webAppLinux'
                    WebAppName: 'weather-webapp-vish-dev'
                    packageForLinux: '$(System.ArtifactsDirectory)/**/WeatherApp.zip'
                    StartupCommand: 'apt-get install python3-pip -y;apt-get install zip -y;apt-get install python3-venv -y;python3 -m venv antenv;source antenv/bin/activate;apt-get install pkg-config -y --ignore-missing;apt-get install dos2unix;apt-get install default-libmysqlclient-dev -y --ignore-missing;FILEPATH=$(find . -type f -name odbc17.sh);dos2unix "$FILEPATH";bash $FILEPATH;python3 app.py'
                
  - stage: "DevApiAppDeploy"
    displayName: "Dev Api App Deploy"
    dependsOn: DevInfra
    jobs:
      - deployment: "DevApiAppDeploy"
        displayName: "Dev Api App: WorldClimateApi"
        environment: dev
        strategy:
          runOnce:
            deploy:
              steps:
                - task: DownloadBuildArtifacts@1
                  inputs:
                    buildType: 'current'
                    downloadType: 'single'
                    artifactName: 'drop'
                    downloadPath: '$(System.ArtifactsDirectory)/downloads'
        
                - task: AzureRmWebAppDeployment@4
                  inputs:
                    ConnectionType: 'AzureRM'
                    azureSubscription: 'vishnuSubscriptionServiceConnection'
                    appType: 'webAppLinux'
                    WebAppName: 'weather-apiapp-vish-dev'
                    packageForLinux: '$(System.ArtifactsDirectory)/**/WorldClimateApi.zip'
                    RuntimeStack: 'PYTHON|3.10'
                    StartupCommand: 'pip install flask;pip install requests;python3 app.py'