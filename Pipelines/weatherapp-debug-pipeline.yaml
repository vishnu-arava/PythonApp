trigger:
- none

parameters:
- name: poolname
  displayName: Pool Name
  type: string
  default: Default
  values:
  - Default
  - RohitPool
  - Satyam
  - vishnupool
- name: agentImage
  displayName: Agent Image
  type: string
  default: chaitanya
  values:
  - chaitanya
  - RohitAgent
  - LAPTOP-RS36BMKA
  - vishnuagent
- name: environment
  displayName: Environment Select
  type: string
  default: dev
  values:
  - dev
  - qa
  - perf
  - vc
- name: resourcegroup
  displayName: Resource group
  type: string
  default: RG-DEV
  values:
  - RG-DEV
  - RG-QA
  - RG-PERF
  - RG-VC
- name: containerization
  displayName: Containerization
  type: string
  default: App Service
  values:
  - App Service
  - App Service(Containers)
  - Container Apps
variables:
- group: WeatherApp-${{ parameters.environment }}
- group: WeatherApp-${{ parameters.environment }}-kv
- name: dblink
  value: $(sql-serverName)-${{ parameters.environment }}.database.windows.net
stages:
- stage: build
  pool:
    name: ${{ parameters.poolname }}
    vmImage: ${{ parameters.agentImage }}
  displayName: Build
  jobs:
  - job: "BuildArtifact"
    displayName: "Build Artifact ARM Templates, Scripts, FunctionApps"
    steps:
    - task: ArchiveFiles@2
      displayName: Archive Source/FunctionApp/servicebusQueueTrigger
      inputs:
        rootFolderOrFile: 'Source/FunctionApps/servicebusQueueTrigger'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/FunctionApps/SBQueueTrigger.zip'
        replaceExistingArchive: true
    - task: CopyFiles@2
      displayName: Copy ARM Templates to drop
      inputs:
        SourceFolder: 'Pipelines/Infra/ARMTemplates'
        Contents: '**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/ARMtemplates'
    - task: CopyFiles@2
      displayName: Copy Powershell Scripts to drop
      inputs:
        SourceFolder: 'Pipelines/Scripts'
        Contents: '**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/PowershellScripts'
    - task: PublishBuildArtifacts@1
      displayName: "Publish Artifact: drop"
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

  - job: "BuildArtifactJob2"
    displayName: "App Service Build"
    condition: eq('${{ parameters.containerization }}', 'App Service')
    steps:
    - task: ArchiveFiles@2
      displayName: Archive Source/WeatherApp
      inputs:
        rootFolderOrFile: 'Source/WeatherApp'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/Apps/WeatherApp.zip'
        replaceExistingArchive: true
    - task: ArchiveFiles@2
      displayName: Archive Source/WorldClimateApi
      inputs:
        rootFolderOrFile: 'Source/WorldClimateApi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/Apps/WorldClimateApi.zip'
        replaceExistingArchive: true
    - task: PublishBuildArtifacts@1
      displayName: "Publish Artifact: drop"
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

  - job: "BuildArtifactJob3"
    displayName: "Containerizing the Source Code"
    condition: or(eq('${{ parameters.containerization }}', 'App Service(Containers)'),
      eq('${{ parameters.containerization }}', 'Container Apps'))
    steps:
    - task: Docker@2
      displayName: "Build docker image : Weatherapp"
      inputs:
        containerRegistry: 'dockerHub-Chaitanya'
        repository: 'venkatachaitanya98/dk-weatherapp'
        command: 'build'
        Dockerfile: 'Source/WeatherApp/dockerfile'
        buildContext: 'Source/WeatherApp'
        tags: '1.0.$(Build.BuildId)'

    - task: Docker@2
      displayName: "Build docker image : WorldClimateApi"
      inputs:
        containerRegistry: 'dockerHub-Chaitanya'
        repository: 'venkatachaitanya98/dk-weatherapp-worldclimateapi'
        command: 'build'
        Dockerfile: 'Source/WorldClimateApi/dockerfile'
        buildContext: 'Source/WorldClimateApi'
        tags: '1.0.$(Build.BuildId)'

    - task: Docker@2
      displayName: "Docker image push : Weatherapp"
      inputs:
        containerRegistry: 'dockerHub-Chaitanya'
        repository: 'venkatachaitanya98/dk-weatherapp'
        command: 'push'
        tags: '1.0.$(Build.BuildId)'

    - task: Docker@2
      displayName: "Docker image push : WorldClimateApi"
      inputs:
        containerRegistry: 'dockerHub-Chaitanya'
        repository: 'venkatachaitanya98/dk-weatherapp-worldclimateapi'
        command: 'push'
        tags: '1.0.$(Build.BuildId)'

- stage: "InfraDeployment"
  pool:
    name: ${{ parameters.poolname }}
    vmImage: ${{ parameters.agentImage }}
  displayName: "Deploy : Infra-${{ parameters.environment }}"
  dependsOn: build
  jobs:
  - deployment: "DeployInfra"
    displayName: "Deploy Infra"
    environment: ${{ parameters.environment }}
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@1
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'drop'
              downloadPath: '$(System.ArtifactsDirectory)'
              
          - task: AzureResourceManagerTemplateDeployment@3
            displayName: SQL
            inputs:
              deploymentScope: 'Resource Group'
              azureResourceManagerConnection: $(serviceConnection)
              subscriptionId: $(subscriptionId)
              action: 'Create Or Update Resource Group'
              resourceGroupName: ${{ parameters.resourcegroup }}
              location: 'East US'
              templateLocation: 'Linked artifact'
              csmFile: '$(System.ArtifactsDirectory)/drop/ARMtemplates/azureSql/azureSqlDb.json'
              csmParametersFile: '$(System.ArtifactsDirectory)/drop/ARMtemplates/azureSql/parameters_${{ parameters.environment }}.json'
              overrideParameters: '-serverName $(sql-serverName) -dbName $(sql-dbName) -userName $(sql-dbUserName) -password $(sql-dbPassword) -tlsVersion "1.2" -env ${{ parameters.environment }} -location "centralus"'
              deploymentMode: 'Incremental'
              deploymentOutputs: 'deploymentOutputs'
          - task: PowerShell@2
            displayName: Get Sql Details
            inputs:
              targetType: 'inline'
              script: |
                $envsqldblink= '$(deploymentOutputs.sqldblink.value)'
                $envsqldbname= '$(deploymentOutputs.sqldbname.value)'
                $envsqldbusername= '$(deploymentOutputs.sqldbusername.value)'
                Write-Host "##vso[task.setvariable variable=envsqldblink;]$envsqldblink"
                Write-Host "##vso[task.setvariable variable=envsqldbname;]$envsqldbname"
                Write-Host "##vso[task.setvariable variable=envsqldbusername;]$envsqldbusername"
                Write-Host "Sql db link : $envsqldblink"
                Write-Host "Sql db name : $envsqldbname"
                Write-Host "Sql db username : $envsqldbusername"
          - task: AzureCLI@2
            displayName: TenantId,Objectid and subscription Id
            inputs:
              azureSubscription: $(serviceConnection)
              scriptType: 'ps'
              scriptLocation: 'inlineScript'
              inlineScript: |
                Write-Output "The tenant ID is: ${env:tenantId}"
                Write-Host "##vso[task.setvariable variable=tenantId;]${env:tenantId}"
                $objectidadmin=az ad user list --query "[?contains(displayName, 'Venkata Chaitanya')].id" --output tsv
                Write-Host "##vso[task.setvariable variable=objectidadmin;]$objectidadmin"
                $subscriptionId = az account show --query id -o tsv
                Write-Host "##vso[task.setvariable variable=subscriptionId;]$subscriptionId"
              addSpnToEnvironment: true
          - task: AzureResourceManagerTemplateDeployment@3
            displayName: Key Vaults
            inputs:
              deploymentScope: 'Resource Group'
              azureResourceManagerConnection: '$(serviceConnection)'
              subscriptionId: '$(subscriptionId)'
              action: 'Create Or Update Resource Group'
              resourceGroupName: '${{ parameters.resourcegroup }}'
              location: 'Central US'
              templateLocation: 'Linked artifact'
              csmFile: '$(System.ArtifactsDirectory)/drop/ARMtemplates/keyVault/keyVault.json'
              csmParametersFile: '$(System.ArtifactsDirectory)/drop/ARMtemplates/keyVault/parameters_${{
                parameters.environment }}.json'
              overrideParameters: >
                -keyvaultname $(keyvaultName) -env ${{ parameters.environment }}
                -tenantId $(tenantId) -spObjectid $(serviceConnectionObjectId)
                -userobjectId $(userObjectId)
              deploymentMode: 'Incremental'
              deploymentOutputs: 'deploymentOutputs'
          - task: PowerShell@2
            displayName: Get Key Vaults Details
            inputs:
              targetType: 'inline'
              script: |
                $envkeyvaultname= '$(deploymentOutputs.keyVaultName.value)'
                Write-Host "##vso[task.setvariable variable=envkeyvaultname;]$envkeyvaultname"
                Write-Host "KeyVault name is: $envkeyvaultname"
          - task: AzureCLI@2
            displayName: App Registration KeyVaultUpdation
            inputs:
              azureSubscription: $(serviceConnection)
              scriptType: 'ps'
              scriptLocation: 'scriptPath'
              scriptPath: '$(System.ArtifactsDirectory)/drop/PowershellScripts/Azcli/appRegistrationKeyVaultUpdation.ps1'
              arguments: '-appRegistrationName "dk-weatherapp-kv-link-${{
                parameters.environment }}" -appRegistrationClientSecretName
                "dk-weatherapp-kv-link-clientsecret-${{ parameters.environment
                }}" -keyVaultName $(envkeyvaultname) -resourceGroupName ${{
                parameters.resourcegroup }} -tenantId $(tenantId)
                -subscriptionId $(subscriptionId) -dbName $(sql-dbName)-${{
                parameters.environment }} -dbPassword $(sql-dbPassword)
                -dbServerLink $(dblink) -dbUserName $(sql-dbUserName)
                -patPowershell $(PAT-powershell)'

          - task: PowerShell@2
            displayName: Updating App Registration Service Principal Object Id into Library
              variable group
            inputs:
              filePath: '$(System.ArtifactsDirectory)/drop/PowershellScripts/Powershell/updating_libVariables.ps1'
              arguments: '-organizationName $(organizationName) -projectName $(projectName)
                -libVariableName "WeatherApp-${{ parameters.environment }}"
                -libVariableParameterName "appRegistrationSpObjectId" -patToken
                $(PAT-powershell) -valuetoUpdate $(appRegSpObjectId)'
          - task: AzureResourceManagerTemplateDeployment@3
            displayName: App Services
            condition: eq('${{ parameters.containerization }}', 'App Service')
            inputs:
              deploymentScope: 'Resource Group'
              azureResourceManagerConnection: $(serviceConnection)
              subscriptionId: $(subscriptionId)
              action: 'Create Or Update Resource Group'
              resourceGroupName: '${{ parameters.resourcegroup }}'
              location: 'North Central US'
              templateLocation: 'Linked artifact'
              csmFile: '$(System.ArtifactsDirectory)/drop/ARMtemplates/appService/appService.json'
              csmParametersFile: '$(System.ArtifactsDirectory)/drop/ARMtemplates/appService/parameters_${{
                parameters.environment }}.json'
              overrideParameters: -skuName "P0V3" -skuTier "Premium"
              deploymentMode: 'Incremental'

          - task: AzureResourceManagerTemplateDeployment@3
            displayName: App Services(Contaners) for WeatherApp
            condition: eq('${{ parameters.containerization }}', 'App Service(Containers)')
            inputs:
              deploymentScope: 'Resource Group'
              azureResourceManagerConnection: $(serviceConnection)
              subscriptionId: $(subscriptionId)
              action: 'Create Or Update Resource Group'
              resourceGroupName: '${{ parameters.resourcegroup }}'
              location: 'East US 2'
              templateLocation: 'Linked artifact'
              csmFile: '$(System.ArtifactsDirectory)/drop/ARMtemplates/appServiceContainer/appServiceContainer.json'
              csmParametersFile: '$(System.ArtifactsDirectory)/drop/ARMtemplates/appServiceContainer/parameters_${{
                parameters.environment }}.json'
              overrideParameters: '-imageRepoWithTag
                "$(weatherapp-dockerRepoName):1.0.$(Build.BuildId)"
                -workspaceName "dk-weatherapp-app-workspace" -appServiceName
                "dk-weatherapp-app-web" -appInsitesName "dk-weatherapp-app-ai"'
              deploymentMode: 'Incremental'

          - task: AzureResourceManagerTemplateDeployment@3
            displayName: App Services(Contaners) for WorldclimateApi
            condition: eq('${{ parameters.containerization }}', 'App Service(Containers)')
            inputs:
              deploymentScope: 'Resource Group'
              azureResourceManagerConnection: $(serviceConnection)
              subscriptionId: $(subscriptionId)
              action: 'Create Or Update Resource Group'
              resourceGroupName: '${{ parameters.resourcegroup }}'
              location: 'East US 2'
              templateLocation: 'Linked artifact'
              csmFile: '$(System.ArtifactsDirectory)/drop/ARMtemplates/appServiceContainer/appServiceContainer.json'
              csmParametersFile: '$(System.ArtifactsDirectory)/drop/ARMtemplates/appServiceContainer/parameters_${{
                parameters.environment }}.json'
              overrideParameters: '-imageRepoWithTag
                "$(worldclimateapi-dockerRepoName):1.0.$(Build.BuildId)"
                -workspaceName "dk-weatherapp-api-workspace" -appServiceName
                "dk-weatherapp-api-web" -appInsitesName "dk-weatherapp-api-ai"'
              deploymentMode: 'Incremental'

          - ${{ if eq('${{ parameters.containerization }}', 'Container Apps') }}:
            - task: AzureResourceManagerTemplateDeployment@3
              displayName: Contaner App Environment Deploymnet
              inputs:
                deploymentScope: 'Resource Group'
                azureResourceManagerConnection: $(serviceConnection)
                subscriptionId: $(subscriptionId)
                action: 'Create Or Update Resource Group'
                resourceGroupName: '${{ parameters.resourcegroup }}'
                location: 'Australia Central'
                templateLocation: 'Linked artifact'
                csmFile: '$(System.ArtifactsDirectory)/drop/ARMtemplates/containerAppEnv/containerAppEnv.json'
                csmParametersFile: '$(System.ArtifactsDirectory)/drop/ARMtemplates/containerAppEnv/parameters_${{
                  parameters.environment }}.json'
                overrideParameters: '-containerAppEnvName "dk-weatherapp-env"
                  -logAnalyticsWorkspaceName "dk-weatherapp-log"'
                deploymentMode: 'Incremental'

            - task: AzureResourceManagerTemplateDeployment@3
              displayName: Contaner Apps(WeatherApp) Deploymnet
              inputs:
                deploymentScope: 'Resource Group'
                azureResourceManagerConnection: $(serviceConnection)
                subscriptionId: $(subscriptionId)
                action: 'Create Or Update Resource Group'
                resourceGroupName: '${{ parameters.resourcegroup }}'
                location: 'Australia Central'
                templateLocation: 'Linked artifact'
                csmFile: '$(System.ArtifactsDirectory)/drop/ARMtemplates/containerApps/containerApps.json'
                csmParametersFile: '$(System.ArtifactsDirectory)/drop/ARMtemplates/containerApps/parameters_${{
                  parameters.environment }}.json'
                overrideParameters: '-containerAppName $(weatherappAppServiceName)
                  -containerName "weatherapp" -containerImage
                  $(weatherapp-dockerRepoName) -subscriptionid $(subscriptionId)
                  -resourcegroupOfEnv "${{ parameters.resourcegroup }}"
                  -containerAppEnv "dk-weatherapp-env"'
                deploymentMode: 'Incremental'

            - task: AzureResourceManagerTemplateDeployment@3
              displayName: Contaner Apps(Worldclimate) Deploymnet
              inputs:
                deploymentScope: 'Resource Group'
                azureResourceManagerConnection: $(serviceConnection)
                subscriptionId: $(subscriptionId)
                action: 'Create Or Update Resource Group'
                resourceGroupName: '${{ parameters.resourcegroup }}'
                location: 'Australia Central'
                templateLocation: 'Linked artifact'
                csmFile: '$(System.ArtifactsDirectory)/drop/ARMtemplates/containerApps/containerApps.json'
                csmParametersFile: '$(System.ArtifactsDirectory)/drop/ARMtemplates/containerApps/parameters_${{
                  parameters.environment }}.json'
                overrideParameters: '-containerAppName
                  $(weatherappWorldCLimateApiAppServiceName) -containerName
                  "worldclimateapi" -containerImage
                  $(worldclimateapi-dockerRepoName) -subscriptionid
                  $(subscriptionId) -resourcegroupOfEnv "${{
                  parameters.resourcegroup }}" -containerAppEnv
                  "dk-weatherapp-env"'
                deploymentMode: 'Incremental'

          - task: AzureResourceManagerTemplateDeployment@3
            displayName: Service Bus
            inputs:
              deploymentScope: 'Resource Group'
              azureResourceManagerConnection: $(serviceConnection)
              subscriptionId: $(subscriptionId)
              action: 'Create Or Update Resource Group'
              resourceGroupName: '${{ parameters.resourcegroup }}'
              location: 'Central US'
              templateLocation: 'Linked artifact'
              csmFile: '$(System.ArtifactsDirectory)/drop/ARMtemplates/servicebus/servicebus.json'
              csmParametersFile: '$(System.ArtifactsDirectory)/drop/ARMtemplates/servicebus/parameters_${{
                parameters.environment }}.json'
              overrideParameters: -servicePrincipalId $(appRegistrationSpObjectId)
              deploymentMode: 'Incremental'

          - task: AzureResourceManagerTemplateDeployment@3
            displayName: Function App
            inputs:
              deploymentScope: 'Resource Group'
              azureResourceManagerConnection: $(serviceConnection)
              subscriptionId: $(subscriptionId)
              action: 'Create Or Update Resource Group'
              resourceGroupName: '${{ parameters.resourcegroup }}'
              location: 'South India'
              templateLocation: 'Linked artifact'
              csmFile: '$(System.ArtifactsDirectory)/drop/ARMtemplates/functionApp/functionApp.json'
              csmParametersFile: '$(System.ArtifactsDirectory)/drop/ARMtemplates/functionApp/parameters_${{
                parameters.environment }}.json'
              deploymentMode: 'Incremental'

- stage: "Sonarque"
  pool:
    name: ${{ parameters.poolname }}
    vmImage: ${{ parameters.agentImage }}
  displayName: "Infra : SonarQube"
  dependsOn: build
  jobs:
  - deployment: "InfraSonarQube"
    displayName: "Infra SonarQube"
    environment: ${{ parameters.environment }}
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@1
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'drop'
              downloadPath: '$(System.ArtifactsDirectory)'

          - task: AzureResourceManagerTemplateDeployment@3
            displayName: VM for SonarQube
            inputs:
              deploymentScope: 'Resource Group'
              azureResourceManagerConnection: $(serviceConnection)
              subscriptionId: $(subscriptionId)
              action: 'Create Or Update Resource Group'
              resourceGroupName: '${{ parameters.resourcegroup }}'
              location: 'East US 2'
              templateLocation: 'Linked artifact'
              csmFile: '$(System.ArtifactsDirectory)/drop/ARMtemplates/vm/vm.json'
              csmParametersFile: '$(System.ArtifactsDirectory)/drop/ARMtemplates/vm/parameters_dev.json'
              overrideParameters: '-vmPassword $(sonarqubeVmPassword)'
              deploymentMode: 'Incremental'

- stage: "AppDeploy"
  pool:
    name: ${{ parameters.poolname }}
    vmImage: ${{ parameters.agentImage }}
  displayName: "Deploy : App-${{ parameters.environment }}"
  dependsOn: InfraDeployment
  jobs:
  - deployment: "DeployApp"
    displayName: "Deploy App"
    environment: ${{ parameters.environment }}
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@1
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'drop'
              downloadPath: '$(System.ArtifactsDirectory)'

          - task: AzureRmWebAppDeployment@4
            displayName: $(weatherappAppServiceName)-${{ parameters.environment }} Web
              Server Deployment
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: $(serviceConnection)
              appType: 'webAppLinux'
              WebAppName: $(weatherappAppServiceName)-${{ parameters.environment }}
              packageForLinux: '$(System.ArtifactsDirectory)/**/weatherapp.zip'
              StartupCommand: 'apt-get install python3-pip -y;apt-get install zip -y;apt-get
                install python3-venv -y;python3 -m venv antenv;source
                antenv/bin/activate;apt-get install pkg-config -y
                --ignore-missing;apt-get install dos2unix;apt-get install
                default-libmysqlclient-dev -y --ignore-missing;FILEPATH=$(find .
                -type f -name odbc17.sh);dos2unix "$FILEPATH";bash
                $FILEPATH;pip install --upgrade azure-core azure-identity;python3 app.py --pairs
                KEY_VAULT_URI=https://$(keyvaultName)-${{ parameters.environment
                }}.vault.azure.net/ TENANT_ID=$(AppRegistrationTenantId)
                CLIENT_ID=$(AppRegistrationClientId)
                CLIENT_SECRET=$(AppRegistrationClientSecret)
                SERVICE_BUS_NAME=$(servicebusName)-${{ parameters.environment }}
                SERVICE_BUS_QUEUE_NAME=$(servicebusQueueName)
                WEATHERCLIMATE_API_URL=https://worldclimateapi-${{
                parameters.environment }}.azurewebsites.net/country'

- stage: "ApiDeploy"
  pool:
    name: ${{ parameters.poolname }}
    vmImage: ${{ parameters.agentImage }}
  displayName: "Deploy : Api-${{ parameters.environment }}"
  dependsOn: InfraDeployment
  jobs:
  - deployment: "DeployApp"
    displayName: "Deploy App"
    environment: ${{ parameters.environment }}
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@1
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'drop'
              downloadPath: '$(System.ArtifactsDirectory)'
          - task: AzureRmWebAppDeployment@4
            displayName: $(weatherappWorldCLimateApiAppServiceName)-${{
              parameters.environment }} Web Server Deployment
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: $(serviceConnection)
              appType: 'webAppLinux'
              WebAppName: $(weatherappWorldCLimateApiAppServiceName)-${{
                parameters.environment }}
              packageForLinux: '$(System.ArtifactsDirectory)/**/WorldClimateApi.zip'
              StartupCommand: 'pip install flask;pip install requests;python3 app.py'

- stage: "FunctionDeploy"
  pool:
    name: ${{ parameters.poolname }}
    vmImage: ${{ parameters.agentImage }}
  displayName: "Deploy : FunctionApp-${{ parameters.environment }}"
  dependsOn: InfraDeployment
  jobs:
  - deployment: "DeployFunction"
    displayName: "Deploy Function"
    environment: ${{ parameters.environment }}
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@1
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'drop'
              downloadPath: '$(System.ArtifactsDirectory)'
          - task: AzureFunctionApp@2
            displayName: Service Bus Queue Function Deploy
            inputs:
              connectedServiceNameARM: '$(serviceConnection)'
              appType: 'functionAppLinux'
              appName: 'dk-weatherapp-${{ parameters.environment }}'
              package: '$(System.ArtifactsDirectory)/**/SBQueueTrigger.zip'
              runtimeStack: 'PYTHON|3.11'
              appSettings: '-WEBSITE_RUN_FROM_PACKAGE 1 -FUNCTIONS_EXTENSION_VERSION ~4'
              deploymentMethod: 'zipDeploy'

- stage: "PostDeploymnet"
  pool:
    name: ${{ parameters.poolname }}
    vmImage: ${{ parameters.agentImage }}
  displayName: "Deploy : PostDeployment-${{ parameters.environment }}"
  dependsOn:
  - ApiDeploy
  - AppDeploy
  condition: |
    and(
      succeeded('ApiDeploy'),
      succeeded('AppDeploy')
    )
  jobs:
  - deployment: "DeployApp"
    displayName: "Deploy App"
    environment: ${{ parameters.environment }}
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@1
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'drop'
              downloadPath: '$(System.ArtifactsDirectory)'

          - task: AzureResourceManagerTemplateDeployment@3
            displayName: Key Vaults
            inputs:
              deploymentScope: 'Resource Group'
              azureResourceManagerConnection: '$(serviceConnection)'
              subscriptionId: '$(subscriptionId)'
              action: 'Create Or Update Resource Group'
              resourceGroupName: '${{ parameters.resourcegroup }}'
              location: 'Central US'
              templateLocation: 'Linked artifact'
              csmFile: '$(System.ArtifactsDirectory)/drop/ARMtemplates/keyVault/keyVault.json'
              csmParametersFile: '$(System.ArtifactsDirectory)/drop/ARMtemplates/keyVault/parameters_${{
                parameters.environment }}.json'
              overrideParameters: >
                -keyvaultname $(keyvaultName)  -env ${{ parameters.environment
                }} -secrets
                '[{\"secretName\":\"DataBasePassword\",\"secretValue\":\"new_password_value\"},{\"secretName\":\"GEODBApiKey\",\"secretValue\":\"new_geodb_api_key\"}]'
              deploymentMode: 'Incremental'
              deploymentOutputs: 'deploymentOutputs'
